---
import { format } from 'date-fns';

import type { DisplayResolvedFilterOptions } from '@/logic/filter';

import { Button } from './ui/button';
import { SearchTooltip } from './Tooltips';

export interface Props {
  filter: DisplayResolvedFilterOptions;
  feedURL: string;
}

const safeFormat: typeof format = (...args) => {
  try {
    return format(...args);
  } catch (error) {
    console.log(error);
    return '';
  }
};

const { filter, feedURL } = Astro.props;

const { type, fansubs, after, before, search, include, keywords, exclude } = filter;
---

<div class="mb4 p4 w-full bg-gray-100 rounded-md space-y-2">
  {
    type && (
      <div class="space-x-2 text-0">
        <span class="text-4 text-base-800 font-bold mr2 select-none keyword">类型</span>
        <span class={`text-4 select-text text-base-600 ${type.color}`}>{type.name}</span>
      </div>
    )
  }
  {
    fansubs && (
      <div class="space-x-2 text-0">
        <span class="text-4 text-base-800 font-bold mr2 select-none keyword">字幕组</span>
        {fansubs.map((fansub) => (
          <a
            href={`/resources/1?fansubId=${fansub.providerId}`}
            class="text-4 select-text text-link"
          >
            {fansub.name}
          </a>
        ))}
      </div>
    )
  }
  {
    after && (
      <div class="space-x-2 select-none text-0">
        <span class="text-4 text-base-800 font-bold mr2 keyword">搜索开始于</span>
        <span class="text-4 select-text">{safeFormat(after, 'yyyy 年 M 月 d 日 hh:mm')}</span>
      </div>
    )
  }
  {
    before && (
      <div class="space-x-2 select-none text-0">
        <span class="text-4 text-base-800 font-bold mr2 keyword">搜索结束于</span>
        <span class="text-4 select-text">{safeFormat(before, 'yyyy 年 M 月 d 日 hh:mm')}</span>
      </div>
    )
  }
  {
    search.length > 0 && (
      <div class="space-x-2 text-0">
        {/* prettier-ignore */}
        <span class="text-4 select-none text-base-800 font-bold mr2 keyword">标题搜索</span>
        {search.map((i) => (
          <span class="text-4 select-text underline underline-dotted underline-gray-500">{i}</span>
        ))}
      </div>
    )
  }
  {
    search.length === 0 && include.length > 0 && (
      <div class="space-x-2 text-0">
        {/* prettier-ignore */}
        <span class="text-4 select-none text-base-800 font-bold mr2 keyword">标题匹配</span>
        {include.map((i, idx) => (
          <>
            {idx > 0 && <span class="text-base-400 text-4 select-none">|</span>}
            {/* prettier-ignore */}
            <span class="text-4 select-text underline underline-dotted underline-gray-500">{i}</span>
          </>
        ))}
      </div>
    )
  }
  {
    search.length === 0 && keywords.length > 0 && (
      <div class="space-x-2 select-none text-0">
        <span class="text-4 text-base-800 font-bold mr2 keyword">包含关键词</span>
        {keywords.map((i, idx) => (
          <>
            {idx > 0 && <span class="text-base-400 text-4 select-none">&</span>}
            {/* prettier-ignore */}
            <span class="text-4 select-text underline underline-dotted underline-gray-500">{i}</span>
          </>
        ))}
      </div>
    )
  }
  {
    search.length === 0 && exclude.length > 0 && (
      <div class="space-x-2 text-0">
        {/* prettier-ignore */}
        <span class="text-4 select-none text-base-800 font-bold mr2 inline-block">排除关键词</span>
        {exclude.map((i) => (
          <span class="text-4 select-text">{i}</span>
        ))}
      </div>
    )
  }
  {
    (search.length !== 0 || include.length !== 0 || keywords.length !== 0) && (
      <div class="flex items-center gap4 pt-4">
        <Button client:load variant="default" size="sm" className="copy-rss" data-rss={feedURL}>
          复制 RSS 订阅链接
        </Button>
        <Button client:load size="sm" className="add-collection">
          添加到收藏夹
        </Button>
        <SearchTooltip />
      </div>
    )
  }
</div>

<script>
  import { APP_HOST } from '~build/meta';

  import { type ResolvedFilterOptions, stringifySearchURL } from '@animegarden/client';

  import { toast } from 'sonner';

  import { hydrateNodesEvent } from '@/lib/hydrate';
  import { store, currentCollectionAtom, openCollectionAtom } from '@/state';
  import { triggerRssEvent, triggerCollectionEvent } from '@/clarity';

  hydrateNodesEvent('.copy-rss', 'click', async (node) => {
    try {
      const url = (node as HTMLElement).dataset.rss;
      if (!url) throw new Error(`RSS URL is empty`);
      const query = encodeURI(url.slice(`/feed.xml?filter=`.length));
      await navigator.clipboard.writeText(`https://${APP_HOST}/feed.xml?filter=${query}`);
      toast.success('复制 RSS 订阅成功', { dismissible: true, duration: 3000, closeButton: true });
      triggerRssEvent('copy');
    } catch (error) {
      console.error(error);
      toast.error('复制 RSS 订阅失败', { closeButton: true });
    }
  });

  hydrateNodesEvent('.add-collection', 'click', async () => {
    try {
      const node = document.querySelector('#fetch-response');
      if (!node) return;

      const filter = JSON.parse(
        (node as HTMLElement).dataset.filter ?? ''
      ) as ResolvedFilterOptions;

      const search = stringifySearchURL(location.origin, filter);
      const collection = store.get(currentCollectionAtom);
      if (!collection.items.find((i) => i.searchParams === search.search)) {
        store.set(currentCollectionAtom, {
          name: collection.name,
          items: [{ ...filter, searchParams: search.search }, ...collection.items]
        });

        toast.success(`成功添加到 ${collection.name}`, {
          dismissible: true,
          duration: 3000,
          closeButton: true
        });
      } else {
        toast.warning(`已添加到 ${collection.name}`, {
          dismissible: true,
          duration: 3000,
          closeButton: true
        });
      }
      store.set(openCollectionAtom, true);
      triggerCollectionEvent('add');
    } catch (error) {
      console.error(error);
      toast.error('添加收藏夹失败', { closeButton: true });
    }
  });
</script>
