---
import { parse } from 'anitomy';
import { formatInTimeZone } from 'date-fns-tz';

import Layout from '@/layouts/Layout.astro';
import { Player } from '@/components/Player';
import { TorrentTooltip } from '@/components/Tooltips';
import { fetchResourceDetail } from '@/fetch';
import { getPikPakUrlChecker } from '@/utils';

const PIKPAK_REFERRAL = `https://mypikpak.com/drive/activity/invited?invitation-code=36743699`;

const { href, provider } = Astro.params;
if (!href || !/^\d+/.test(href) || !provider || !['dmhy', 'moe'].includes(provider)) {
  return Astro.redirect('/');
}

const detail = await fetchResourceDetail(provider, href);
if (!detail) {
  return Astro.redirect('/');
}

const pikpakUrl = getPikPakUrlChecker(detail.magnet.href);

const files = detail.magnet.files.filter((f) => f.size !== '種子可能不存在' && f.size !== 'Bytes');
const playTarget = detail.magnet.files.filter(
  (f) => f.name.endsWith('.mp4') || f.name.endsWith('.mkv')
)[0];

const info = parse(detail.title);
const schema = info
  ? JSON.stringify({
      '@context': 'http://schema.org',
      '@type': 'TVEpisode',
      partOfTVSeries: {
        '@type': 'TVSeries',
        name: info.title
      },
      partOfSeason: {
        '@type': 'TVSeason',
        seasonNumber: `${info.season ?? 1}`
      },
      episodeNumber: info.episode.number !== undefined ? `${info.episode.number}` : undefined,
      datePublished: detail.createdAt,
      url: Astro.url.toString()
    })
  : undefined;
---

<Layout active="" title={`${detail.title}`} canonicalURL={`/detail/${provider}/${href}`}>
  {info && <script type="application/ld+json" set:html={schema} />}

  <div class="detail mt-4vh w-full space-y-4">
    <h1 class="text-xl font-bold resource-title">
      <span>{detail.title}</span>
    </h1>
    <div class="download-link rounded-md shadow-box">
      <h2 class="text-lg font-bold border-b px4 py2 flex items-center">
        <a
          href={pikpakUrl}
          class="play text-link-active underline underline-dotted underline-offset-6"
          target="_blank">下载链接</a
        >
        <!-- <TorrentTooltip client:load /> -->
      </h2>
      <div
        class="p4 space-y-1 overflow-auto whitespace-nowrap
          [&>div>span:first-child]:(text-base-600 select-none inline-block w-[160px] min-w-[160px] lt-sm:w-[120px] lt-sm:min-w-[120px])
          [&>div]:(flex)
          [&>div>a]:(inline-block flex-1 pr-4) lt-md:text-sm"
      >
        <div>
          <span>
            <a
              href={pikpakUrl}
              target="_blank"
              class="play text-link-active underline underline-dotted underline-offset-6"
              >在线播放</a
            >
          </span>
          <a href={pikpakUrl} target="_blank" class="play text-link">使用 PikPak 播放</a>
        </div>
        <div>
          <span>磁力链接</span>
          <a href={detail.magnet.href} class="download text-link"
            >{detail.magnet.href.split('&')[0]}</a
          >
        </div>
        <div>
          <span>磁力链接 type II</span>
          <a href={detail.magnet.href2} class="download text-link">{detail.magnet.href2}</a>
        </div>
        {
          detail.magnet.user && (
            <div>
              <span>会员链接</span>
              <a href={detail.magnet.user} class="download text-link">
                {detail.magnet.user}
              </a>
            </div>
          )
        }
        <div>
          <span>原链接</span>
          <a href={detail.href} target="_blank" class="text-link">{detail.href}</a>
        </div>
        <!-- {
          playTarget && (
            <div>
              <span>在线播放</span>
              <span
                class="download-play text-link cursor-pointer inline-block flex-1"
                data-magnet={detail.magnet.href}
                data-file={playTarget.name}
              >
                {playTarget.name.split('/').at(-1)}
              </span>
            </div>
          )
        } -->

        <!-- <div>
          <span>弹幕播放链接</span>
          <a href={detail.magnet.ddplay} class="text-link">{detail.magnet.ddplay}</a>
        </div> -->
      </div>
    </div>

    <div
      class="description"
      set:html={detail.description.replace(
        /簡介:(&nbsp;)?/,
        '<h2 class="text-lg font-bold">简介</h2>'
      )}
    />

    <div class="publisher">
      <h2 class="text-lg font-bold pb4">
        {detail.fansub ? '发布者 / 字幕组' : '发布者'}
      </h2>
      <div class="flex gap8">
        <div>
          <a href={`/resources/1?publisherId=${detail.publisher.id}`} class="block text-left">
            <img
              src={detail.publisher.avatar}
              alt="Publisher Avatar"
              onerror="this.src = `https://share.dmhy.org/images/defaultUser.png`;"
              class="inline-block w-[100px] h-[100px] rounded"
            />
            <span class="text-link block mt2">{detail.publisher.name}</span>
          </a>
        </div>
        {
          detail.fansub && (
            <div>
              <a href={`/resources/1?fansubId=${detail.fansub.id}`} class="block w-auto text-left">
                <img
                  src={detail.fansub.avatar}
                  alt="Fansub Avatar"
                  onerror="this.src = `https://share.dmhy.org/images/defaultUser.png`;"
                  class="inline-block w-[100px] h-[100px] rounded"
                />
                <span class="text-link block mt2">{detail.fansub.name}</span>
              </a>
            </div>
          )
        }
      </div>
    </div>
    <div>
      <span class="font-bold">发布于&nbsp;</span><span
        >{formatInTimeZone(new Date(detail.createdAt), 'Asia/Shanghai', 'yyyy-MM-dd HH:mm')}</span
      >
    </div>
    <div class="file-list rounded-md shadow-box">
      <h2 class="text-lg font-bold border-b px4 py2">文件列表</h2>
      <div class="mb4 max-h-[80vh] overflow-auto px4">
        {
          files.map((f) => (
            <div class="py2 flex justify-between items-center gap4">
              <div class="text-sm text-base-600">{f.name}</div>
              <div class="text-xs text-base-400 select-none">{f.size}</div>
            </div>
          ))
        }
        {
          files.length === 0 ? (
            <div class="py2 select-none text-center text-red-400">种子信息解析失败</div>
          ) : undefined
        }
        {detail.magnet.hasMoreFiles ? <div class="text-base-400">...</div> : undefined}
      </div>
    </div>
  </div>

  <Player client:visible />

  <script>
    import { hydrateNodesEvent } from '@/lib/hydrate';
    import { triggerDownloadEvent, triggerPikPakEvent } from '@/clarity';

    hydrateNodesEvent('.detail a.download', 'click', () => {
      const titleEl = document.querySelector(`h1.resource-title`);
      const title = titleEl?.textContent;
      if (title) {
        triggerDownloadEvent(title);
      }
    });

    hydrateNodesEvent('.detail a.play', 'click', () => {
      const titleEl = document.querySelector(`h1.resource-title`);
      const title = titleEl?.textContent;
      if (title) {
        triggerPikPakEvent(title);
      }
    });

    hydrateNodesEvent('.detail span.download-play', 'click', async (node, ev) => {
      const target = ev.target as HTMLSpanElement;
      const magnet = target.getAttribute('data-magnet');
      const file = target.getAttribute('data-file');

      if (!magnet || !file) return;

      // await import('video.js');

      const { store } = await import('@/state');
      const { playerAtom } = await import('@/components/Player/state');
      store.set(playerAtom, { open: true, file, loading: true });

      const { makeWebTorrent } = await import('@/components/Player/torrent');
      const client = await makeWebTorrent();
      const torrent = await client.download(magnet);
      console.log(`Downloading torrent`, torrent);
      store.set(playerAtom, { open: true, file, loading: false });
      const torrentFile = torrent.files.find((f) => f.name === file);
      // const torrentFile = torrent.files.find((f) => f.name.endsWith('.mp4'));
      // @ts-ignore
      torrentFile.streamTo(document.querySelector('#video-container'));
    });
  </script>
</Layout>

<style is:global>
  .detail .description hr {
    margin-top: 0.5rem;
    padding-bottom: 0.5rem;
  }

  .detail .description img {
    margin-bottom: 0.5rem;
    max-width: 60%;
    max-height: 60vh;
    border-radius: 4px;
    object-fit: cover;
  }

  @media (max-width: 767.9px) {
    .detail .description img {
      max-width: 90%;
      max-height: 80vh;
    }
  }
</style>
